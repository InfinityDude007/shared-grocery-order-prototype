name: Database Setup Pipeline

# Trigger the pipeline on push or pull request to the 'main' branch
on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
  database-setup:
    # Use the latest Ubuntu runner to execute the workflow
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code so that subsequent steps can access it
      - name: Check out code 
        uses: actions/checkout@v3

      # Step 2: Set up Python environment with the specified version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Step 3: Create a virtual environment for the database and dependencies
      - name: Set up virtual environment
        run: |
          python -m venv venv

      # Step 4: Clear pip cache to ensure fresh installs and avoid issues with dependency versions
      - name: Clear pip cache
        run: |
          rm -rf ~/.cache/pip

      # Step 5: Install Python dependencies from the 'server/requirements.txt' onto the virtual environment
      - name: Install dependencies
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt

      # Step 6: Clear pytest cache to ensure fresh test runs and modules
      - name: Clear pytest cache
        run: |
          source venv/bin/activate
          pytest --cache-clear

      # Step 7: Run the database setup script from the project in the virtual environment
      - name: Run database setup
        run: |
          source venv/bin/activate
          PYTHONPATH=$(pwd) python -m server.database -c "import asyncio; asyncio.run(create_database())"
        env:
          # Set environment variables required for database connection from the repo secrets
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: postgres
          DATABASE_PORT: 5432
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}

      - name: Test database connection with pytest
        run: |
          source venv/bin/activate
          pytest -s tests/test_db_connection.py
        env:
          # Set environment variables required for database connection from the repo secrets
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: postgres
          DATABASE_PORT: 5432
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
